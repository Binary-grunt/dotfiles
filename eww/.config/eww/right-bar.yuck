(defvar volrev false)
(defvar volico "󰕾")

(defwidget volume []
    (box :class "volume-short"
        (box :orientation "h"
             :space-evenly false
             (label :text "${volico} " :style "margin-right:1px;")
             (label :class "bsht" 
                    :text "${get_vol}%")
        )
    )
)

(defwidget ram []
    (box :class "ram-short"
        (box :orientation "h"
             :space-evenly false
             (label :text " ")
             (label :class "bsht" 
                    :text "${round(EWW_RAM.used_mem_perc,0)}%")
        )
    )
)

(defwidget battery []
    (box :class "battery"
        (box :orientation "h"
                       :space-evenly false
                       (box :class "batico-short"
                            (literal :content batico)
                       )
                       (label :class "bsht" 
                              :text "${EWW_BATTERY.BAT0.capacity}%")
                  )
    )
)


(defvar wifirev false)
(defvar wifihov false)
(defvar wifictlrev false)

(defpoll wifistatus :interval "1s" :initial "{\"icon\": \"睊\", \"ssid\": \"Disconnected\", \"strength\": 0}"
    "./scripts/current-wifi.sh"
)

(defwidget wifi []
    (box :class "wifi"
        (eventbox :cursor "pointer"
                  :onhover "./scripts/wifi-delay.sh"
                  :onhoverlost "bash -c '/usr/bin/eww update wifirev=false && /usr/bin/eww update wifihov=false'"
                  :onclick "${ctlrev==true?"./scripts/usrctl.sh && ./scripts/wifictl.sh":"./scripts/wifictl.sh"}"
                  (box :orientation "h"
                       :space-evenly false
                       (label :text "${wifistatus.icon}")
                       (label :class "space-wifi" :text "\\u00A0")
                       (revealer :reveal {wifirev||wifictlrev?true:false}
                                 :transition "slideright"
                                 :duration "350ms"
                                 (box :class "wifi-type" :space-evenly false
                                      (label :class "wifi-div" :text "|")
                                      (label :limit-width 12 :text "${wifistatus.ssid}")
                                 )
                       )

                  )
        )
    )
)

(defpoll network :interval "3s" 
        "./scripts/getnet.sh"
)

(defwidget wifi_event []
    (eventbox :class "shadow-container"
              :onhoverlost "./scripts/wifictl.sh"
              (box :orientation "v"
                   :space-evenly false
              (box :class "wifictl-container"
                   :space-evenly false
                   :orientation "v"
                   (box :class "wifi-header"
                        :space-evenly false
                        (label :text "Network Manager")
                   )
                   (box :class "wifi-stats"
                        :space-evenly false
                        (label :text "STATUS : ")
                        (label :class "${wifistatus.ssid=="Disconnected"?"nocon":"yescon"}" 
                               :limit-width 27
                               :text  "${wifistatus.ssid=="Disconnected"?" Disconnected":" Connected to ${wifistatus.ssid}"}")
                   )
                   (scroll :vscroll true
                           :class "network-container"
                           (box :orientation "v" :space-evenly false
                                (for i in {network}
                                    (wifi-option :ssid "${i.ssid}" :inuse "${i.in_use}" :auto {i.autoconnect}) 
                                )
                           )
                   )
              )
              (revealer :reveal {wificonfigrev}
                        :transition "slidedown"
                        :duration "350ms"
                        (eventbox :onhoverlost "/usr/bin/eww update wificonfigrev=false"
                                  (box :class "wifictl-container"
                                       :space-evenly false
                                       :orientation "v"
                                       (box :class "swifi-header"
                                            :space-evenly false
                                            (label :text "${wifissidrev}")
                                       )
                                       (box :class "wifi-bcon"
                                            :orientation "h"
                                            :visible {wificlass=="1"?true:false}
                                            (box :class "wifi-buttons"
                                            (input :password true
                                                   :space-evenly false
                                                   :class "iwifi"
                                                   :height 30
                                                   :onaccept "/usr/bin/eww update wificonfigrev=false && nmcli device wifi connect \"${wifissidrev}\" password \"{}\""
                                            ))
                                       )
                                       (box :orientation "h"
                                            :spacing 10
                                            :visible {wificlass=="2"?true:false}
                                            :class "wifi-bcon"
                                            (eventbox :cursor "pointer"
                                                      :height 30
                                                      :class "wifi-buttons"
                                                      :onclick "/usr/bin/eww update wificonfigrev=false && nmcli device wifi connect \"${wifissidrev}\""
                                                      (label :text "Connect")
                                            )
                                            (eventbox :cursor "pointer"
                                                      :class "wifi-buttons"
                                                      :onclick "/usr/bin/eww update wificonfigrev=false && nmcli connection delete \"${wifissidrev}\""
                                                      (label :text "Remove")
                                            )
                                       )
                                       (box :orientation "h"
                                            :spacing 10
                                            :visible {wificlass=="3"?true:false}
                                            :class "wifi-bcon"
                                            (eventbox :cursor "pointer"
                                                      :class "wifi-buttons"
                                                      :onclick "/usr/bin/eww update wificonfigrev=false && nmcli device disconnect wlp0s20f3"
                                                      :height 30
                                                      (label :text "Disconnect")
                                            )
                                            (eventbox :cursor "pointer"
                                                      :class "wifi-buttons"
                                                      :onclick "/usr/bin/eww update wificonfigrev=false && nmcli connection delete \"${wifissidrev}\""
                                                      (label :text "Remove")
                                            )
                                       )
                                  )
                        )
              ))

    )
)


(defvar wificonfigrev false)
(defvar wifissidrev "")
(defvar wificlass "")

(defwidget wifi-option [ssid auto inuse]
    (eventbox :cursor "pointer"
              :onclick "/usr/bin/eww update wificonfigrev=false && /usr/bin/eww update wificonfigrev=true && /usr/bin/eww update wificlass=${auto==false?"1":inuse==false?"2":"3"} && /usr/bin/eww update wifissidrev=\"${ssid}\""
              (box :class "wifi-option-box"
                   :orientation "v"
                   (box :class "wifi-ssid"
                        :space-evenly false
                        :orientation "h"
                        (label :class "${auto==false?"wifi-ssid-01":inuse==false?"wifi-ssid-02":"wifi-ssid-03"}"
                               :limit-width 30 
                               :text "${ssid}"
                        )
                   )
               )
    )
)

(defwindow wifictl
    :monitor 0
    :stacking "overlay"
    :focusable "ondemand"
    :geometry (geometry :anchor "top right"
                        :x "5px"
                        :y "-14px"
                        :width "425px"
                        :height "440px"
    )
    (expander :expanded true
              (revealer :transition "slidedown"
                        :reveal wifictlrev
                        :duration "350ms"
                        (wifi_event)
              )
    )
)

(defwidget button-module [icon cmd ?class ?subclass]
    (box :class "${class}"
         :orientation "h"
         (eventbox :onclick "${cmd}"
                   :cursor "pointer"
                   :class "${subclass}"
                   (label :text "${icon}")
         )
    )
)

(defwidget power []
    (box :class "power"
         :orientation "h"
         (eventbox :onclick '${wifictlrev == true ? "bash -c \"./scripts/wifictl.sh & sleep 0.233 && ./scripts/usrctl.sh &\"" : "./scripts/usrctl.sh"}'
                   :cursor "pointer"
                   :class "power-eventbox"
                   (label :text "󰻃 ")
         )
    )
)
